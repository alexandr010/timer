{"version":3,"sources":["components/Controls/Controls.jsx","App.js","reportWebVitals.js","index.js"],"names":["Controls","memo","onStart","onWait","onReset","className","onClick","App","useState","hours","minutes","seconds","timer","setTimer","prev","setPrev","subscriptions","setSubscriptions","timerBody","value","Math","floor","pauseTimer","useCallback","event","detail","unsubscribe","resetTimer","startTimer","interval","subscribe","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAGaA,EAAWC,gBAAK,YAAmC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/C,OACE,sBAAKC,UAAU,WAAf,UACE,wBAAQA,UAAU,cAAcC,QAASH,EAAzC,kBACA,wBAAQE,UAAU,eAAeC,QAASJ,EAA1C,0BACA,wBAAQG,UAAU,eAAeC,QAASF,EAA1C,yB,MCyESG,MAzEf,WACE,MAA0BC,mBAAS,CACjCC,MAAO,EACPC,QAAS,EACTC,QAAS,IAHX,mBAAOC,EAAP,KAAcC,EAAd,KAKA,EAAwBL,mBAAS,GAAjC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAA0CP,mBAAS,MAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KAEMC,EAAY,SAACC,GACjBJ,EAAQI,GACR,IAAMR,EAAUQ,EAAQ,GAClBT,EAAUU,KAAKC,MAAOF,EAAQ,KAAQ,IACtCV,EAAQW,KAAKC,MAAMF,EAAQ,MACjCN,EAAS,CACPF,UACAD,UACAD,WAqBEa,EAAaC,uBAAY,SAACC,GACT,IAAjBA,EAAMC,SACRT,EAAcU,cACdT,EAAiB,SAElB,CAACD,IAEEW,EAAaJ,uBAAY,WAC7BP,GAAiBA,EAAcU,cAC/Bb,EAAS,CACPJ,MAAO,EACPC,QAAS,EACTC,QAAS,IAEX,IAAMiB,EAAaC,YAtDT,KAsDyBC,WAAU,SAACX,GAC5CD,EAAUC,MAEZF,EAAiBW,KAChB,CAACZ,IAEIP,EAA4BG,EAA5BH,MAAOC,EAAqBE,EAArBF,QAASC,EAAYC,EAAZD,QAExB,OACE,sBAAKN,UAAU,MAAf,UACGI,EAAQ,GAAR,WAAiBA,GAAUA,EAC3B,MACAC,EAAU,GAAV,WAAmBA,GAAYA,EAC/B,MACAC,EAAU,GAAV,WAAmBA,GAAYA,EAEhC,cAAC,EAAD,CAAUT,QA/CG,WACf,GAAKc,EAMHA,EAAcU,cACdb,EAAS,CACPJ,MAAO,EACPC,QAAS,EACTC,QAAS,IAEXM,EAAiB,UAZC,CAClB,IAAMW,EAAaC,YAzBX,KAyB2BC,WAAU,SAACX,GAC5CD,EAAUC,EAAQL,MAEpBG,EAAiBW,KA0CYzB,OAAQmB,EAAYlB,QAASuB,QChEjDI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f1df3f63.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Controls.css';\r\n\r\nexport const Controls = memo(({ onStart, onWait, onReset }) => {\r\n  return (\r\n    <div className=\"controls\">\r\n      <button className=\"button wait\" onClick={onWait}>Wait</button>\r\n      <button className=\"button start\" onClick={onStart}>Start / Stop</button>\r\n      <button className=\"button reset\" onClick={onReset}>Reset</button>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useState, useCallback } from \"react\";\nimport { interval } from \"rxjs\";\nimport { Controls } from \"./components/Controls\";\n\nimport \"./App.css\";\n\nconst delay = 1000;\n\nfunction App() {\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  const [prev, setPrev] = useState(0);\n  const [subscriptions, setSubscriptions] = useState(null);\n\n  const timerBody = (value) => {\n    setPrev(value);\n    const seconds = value % 60;\n    const minutes = Math.floor((value % 3600) / 60);\n    const hours = Math.floor(value / 3600);\n    setTimer({\n      seconds,\n      minutes,\n      hours,\n    });\n  };\n\n  const runTimer = () => {\n    if (!subscriptions) {\n      const startTimer = interval(delay).subscribe((value) => {\n        timerBody(value + prev);\n      });\n      setSubscriptions(startTimer);\n    } else {\n      subscriptions.unsubscribe();\n      setTimer({\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      });\n      setSubscriptions(null);\n    }\n  };\n\n  const pauseTimer = useCallback((event) => {\n    if (event.detail === 2) {\n      subscriptions.unsubscribe();\n      setSubscriptions(null);\n    }\n  }, [subscriptions]);\n\n  const resetTimer = useCallback(() => {\n    subscriptions && subscriptions.unsubscribe();\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    });\n    const startTimer = interval(delay).subscribe((value) => {\n      timerBody(value);\n    });\n    setSubscriptions(startTimer);\n  }, [subscriptions]);\n\n  const { hours, minutes, seconds } = timer;\n\n  return (\n    <div className=\"App\">\n      {hours < 10 ? `0${hours}` : hours}\n      {\" : \"}\n      {minutes < 10 ? `0${minutes}` : minutes}\n      {\" : \"}\n      {seconds < 10 ? `0${seconds}` : seconds}\n\n      <Controls onStart={runTimer} onWait={pauseTimer} onReset={resetTimer} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}