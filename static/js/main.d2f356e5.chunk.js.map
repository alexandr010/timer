{"version":3,"sources":["components/Controls/Controls.jsx","App.js","reportWebVitals.js","index.js"],"names":["Controls","memo","onStart","onWait","onReset","className","onClick","App","useState","hours","minutes","seconds","timer","setTimer","intervalId","setIntervalId","startTimer","useCallback","Id","setInterval","current","stopTimer","clearInterval","runTimer","pauseTimer","event","detail","resetTimer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGaA,EAAWC,gBAAK,YAAmC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/C,OACE,sBAAKC,UAAU,WAAf,UACE,wBAAQA,UAAU,cAAcC,QAASH,EAAzC,kBACA,wBAAQE,UAAU,eAAeC,QAASJ,EAA1C,0BACA,wBAAQG,UAAU,eAAeC,QAASF,EAA1C,yBCmFSG,MAvFf,WACE,MAA0BC,mBAAS,CACjCC,MAAO,EACPC,QAAS,EACTC,QAAS,IAHX,mBAAOC,EAAP,KAAcC,EAAd,KAKA,EAAoCL,mBAAS,MAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KA0BMC,EAAaC,uBAAY,WAC7B,IAAMC,EAAKC,aAAY,WAxBvBN,GAAS,SAACO,GACR,IAAIT,EAAUS,EAAQT,QAAU,EAC5BD,EAAUU,EAAQV,QAClBD,EAAQW,EAAQX,MAYpB,OAVIE,GAAW,KACbD,GAAoB,EACpBC,EAAU,GAGRD,GAAW,KACbD,GAAgB,EAChBC,EAAU,GAGL,CACLD,QACAC,UACAC,gBAMsC,KAC1CI,EAAcG,KACb,IAEGG,EAAYJ,uBAAY,WAC5BK,cAAcR,GACdD,EAAS,CACPJ,MAAO,EACPC,QAAS,EACTC,QAAS,IAEXI,EAAc,QACb,CAACD,IAEES,EAAWN,uBAAY,WACvBH,EACFO,IAEAL,MAED,CAACF,EAAYO,EAAWL,IAGrBQ,EAAaP,uBAAY,SAACQ,GACT,IAAjBA,EAAMC,QAAgBZ,IACxBQ,cAAcR,GACdC,EAAc,SAEf,CAACD,IAEEa,EAAaV,uBAAY,WAC7BI,IACAL,MACC,CAACK,EAAWL,IAERP,EAA2BG,EAA3BH,MAAOC,EAAoBE,EAApBF,QAASC,EAAWC,EAAXD,QAEvB,OACE,sBAAKN,UAAU,MAAf,UACGI,EAAQ,GAAR,WAAiBA,GAAUA,EAC3B,MACAC,EAAU,GAAV,WAAmBA,GAAYA,EAC/B,MACAC,EAAU,GAAV,WAAmBA,GAAYA,EAEhC,cAAC,EAAD,CACET,QAASqB,EACTpB,OAAQqB,EACRpB,QAASuB,QCzEFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2f356e5.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Controls.css';\r\n\r\nexport const Controls = memo(({ onStart, onWait, onReset }) => {\r\n  return (\r\n    <div className=\"controls\">\r\n      <button className=\"button wait\" onClick={onWait}>Wait</button>\r\n      <button className=\"button start\" onClick={onStart}>Start / Stop</button>\r\n      <button className=\"button reset\" onClick={onReset}>Reset</button>\r\n    </div>\r\n  )\r\n})\r\n","import React, {useState, useCallback} from 'react';\nimport './App.css';\nimport {Controls} from \"./components/Controls\";\n\nfunction App() {\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  const [intervalId, setIntervalId] = useState(null);\n\n  const timerBody = () => {\n    setTimer((current) => {\n      let seconds = current.seconds + 1;\n      let minutes = current.minutes;\n      let hours = current.hours;\n\n      if (seconds >= 60) {\n        minutes = minutes + 1;\n        seconds = 0;\n      }\n\n      if (minutes >= 60) {\n        hours = hours + 1;\n        minutes = 0;\n      }\n\n      return {\n        hours,\n        minutes,\n        seconds,\n      }\n    });\n  };\n\n  const startTimer = useCallback(() => {\n    const Id = setInterval(() => timerBody(), 1000);\n    setIntervalId(Id);\n  }, []);\n\n  const stopTimer = useCallback(() => {\n    clearInterval(intervalId);\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setIntervalId(null);\n  }, [intervalId]);\n\n  const runTimer = useCallback(() => {\n    if (intervalId) {\n      stopTimer();\n    } else {\n      startTimer();\n    }\n  }, [intervalId, stopTimer, startTimer]);\n\n\n  const pauseTimer = useCallback((event) => {\n    if (event.detail === 2 && intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  }, [intervalId]);\n\n  const resetTimer = useCallback(() => {\n    stopTimer();\n    startTimer();\n  }, [stopTimer, startTimer]);\n\n  const {hours, minutes, seconds} = timer;\n\n  return (\n    <div className=\"App\">\n      {hours < 10 ? `0${hours}` : hours}\n      {' : '}\n      {minutes < 10 ? `0${minutes}` : minutes}\n      {' : '}\n      {seconds < 10 ? `0${seconds}` : seconds}\n\n      <Controls\n        onStart={runTimer}\n        onWait={pauseTimer}\n        onReset={resetTimer}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}